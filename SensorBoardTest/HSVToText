typedef struct 
{
    double Hue, Saturation, Value;
    char c_name[20];
} HSV;


const char * hsv_string(HSV hsv_c){
    
    HSV all_colors_hsv[] = {
    {0, 1.00, 1.00, "Red"},
    {120, 1.00, 1.00, "Green"},
    {240, 1.00, 1.00, "Blue"},
    {60, 1.00, 1.00, "Yellow"},
    {0, 0.00, 0.00, "Black"},
    {0, 0.00, 1.00, "White"},
    {0, 0.00, 0.50, "Grey"},
    {39, 1.00, 1.00, "Orange"},
    {350, 0.25, 1.00, "Pink"},
    {0, 0.75, 0.65, "Brown"},
    {300, 1.00, 0.50, "Purple"},
    };

    double min_dis = 10000;
    int all_c_index = 0;

    double distance;
    HSV select_color;

    for (int i = 0; i < (11); i++){
        select_color = all_colors_hsv[i];
        double hue_diff = fmin(fabs(hsv_c.Hue - select_color.Hue), 360 - fabs(hsv_c.Hue - select_color.Hue));
        distance = sqrt(pow(hue_diff, 2) + pow(hsv_c.Saturation - select_color.Saturation, 2) + pow(hsv_c.Value - select_color.Value, 2));

        if (distance < min_dis){
            all_c_index = i;
            min_dis = distance;
            
        }
    }

    if (all_c_index == 0){
        return "red";
    } else if (all_c_index == 1){
        return "green";
    }else if (all_c_index == 2){
        return "blue";
    }else if (all_c_index == 3){
        return "yellow";
    }else if (all_c_index == 4){
        return "black";
    }else if (all_c_index == 5){
        return "white";
    }else if (all_c_index == 6){
        return "grey";
    }else if (all_c_index == 7){
        return "orange";
    }else if (all_c_index == 8){
        return "pink";
    }else if (all_c_index == 9){
        return "brown";
    }else if (all_c_index == 10){
        return "purple";
    }

}
